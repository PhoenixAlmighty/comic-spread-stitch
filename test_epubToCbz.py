#	Comic Spread Stitch - for making digital comic books easier to read
#	Copyright (C) 2024 Reed Mauzy
#
#	This program is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.

import unittest
import epubToCbz
import os
import filecmp
import shutil
import io
import sys

class TestGetDocDir(unittest.TestCase):
	# no document directory
	def test_getDocDir_noDocDir(self):
		yesCBZOLD = os.path.join(os.path.dirname(__file__), "test-resources", "cbz-old")
		os.chdir(yesCBZOLD)
		self.assertFalse(epubToCbz.getDocDir(), "cbz-old should not contain a document directory.")
	
	# yes document directory
	def test_getDocDir_yesDocDir(self):
		extEpub = os.path.join(os.path.dirname(__file__), "test-resources", "extracted-epub")
		os.chdir(extEpub)
		self.assertEqual(epubToCbz.getDocDir(), "OEBPS", "extracted-epub should contain a document directory called OEBPS.")
	

class TestFindOpfFile(unittest.TestCase):
	# no OPF file
	def test_findOpfFile_noOpfFile(self):
		imageDir = os.path.join(os.path.dirname(__file__), "test-resources", "extracted-epub", "OEBPS", "images")
		os.chdir(imageDir)
		self.assertFalse(epubToCbz.findOpfFile(), "images should not contain an OPF file.")
	
	# yes OPF file
	def test_findOpfFile_yesOpfFile(self):
		docDir = os.path.join(os.path.dirname(__file__), "test-resources", "extracted-epub", "OEBPS")
		os.chdir(docDir)
		self.assertEqual(epubToCbz.findOpfFile(), "content.opf", "OEBPS should contain an OPF file called content.opf.")
	

class TestGetManifestAndSpine(unittest.TestCase):
	# basic sanity test
	def test_getManifestAndSpine_sanity(self):
		docDir = os.path.join(os.path.dirname(__file__), "test-resources", "extracted-epub", "OEBPS")
		os.chdir(docDir)
		opfFile = "content.opf"
		manifest, spine = epubToCbz.getManifestAndSpine(opfFile)
		expectedManifest = {'ncx': 'toc.ncx', 'css_styles': 'styles.css', 'coverstyle': 'coverstyle.css', 'xpgt_styles': 'styles.xpgt', 'cap01': 'baboon.xhtml', 'cap02': 'baboonccw.xhtml', 'cap03': 'babooncw.xhtml', 'cap04': 'boat.xhtml', 'cap05': 'boatccw.xhtml', 'cap06': 'boatcw.xhtml', 'p16': 'images/p16.jpg', 'p216': 'images/p216.jpg', 'p223': 'images/p223.jpg', 'p224': 'images/p224.jpg', 'p5': 'images/p5.jpg', 'id': 'images/baboon.png', 'id1': 'images/baboonccw.png', 'id2': 'images/babooncw.png', 'id3': 'images/boat.png', 'id4': 'images/boatccw.png', 'id5': 'images/boatcw.png', 'cover': 'OEBPS/cover.jpg'}
		expectedSpine = ['cap01', 'cap02', 'cap03', 'cap04', 'cap05', 'cap06']
		self.assertEqual(manifest, expectedManifest, "Manifest is not what was expected")
		self.assertEqual(spine, expectedSpine, "Spine is not what was expected")
	

class TestGetImageFilenames(unittest.TestCase):
	# basic sanity test
	def test_getImageFilenames_sanity(self):
		docDir = os.path.join(os.path.dirname(__file__), "test-resources", "extracted-epub", "OEBPS")
		os.chdir(docDir)
		opfFile = "content.opf"
		manifest, spine = epubToCbz.getManifestAndSpine(opfFile)
		imgs = epubToCbz.getImageFilenames(manifest, spine)
		expectedImgs = ['images/baboon.png', 'images/baboonccw.png', 'images/babooncw.png', 'images/boat.png', 'images/boatccw.png', 'images/boatcw.png']
		self.assertEqual(imgs, expectedImgs, "Image list is not what was expected.")
	

class TestBuildCbzFile(unittest.TestCase):
	# basic sanity
	def test_buildCbzFile_sanity(self):
		imgDir = os.path.join(os.path.dirname(__file__), "test-resources", "img")
		os.chdir(imgDir)
		imgs = ["baboon.png", "baboonccw.png", "babooncw.png", "boat.png", "boatccw.png", "boatcw.png"]
		epubToCbz.buildCbzFile(imgs, "", "From ePub.cbz")
		os.chdir("..")
		self.assertTrue(filecmp.cmp(os.path.join("img", "From ePub.cbz"), os.path.join("cbz-from-epub", "From ePub.cbz")),
						"File generated by buildCbzFile should be equal to the one in cbz-from-epub directory")

	# negative test
	# this should fail because the filenames in the zip archive should be different
	# even though the images are the same and in the same order
	def test_buildCbzFile_negative(self):
		imgDir = os.path.join(os.path.dirname(__file__), "test-resources", "img")
		os.chdir(imgDir)
		imgs = ["baboon.png", "baboonccw.png", "babooncw.png", "boat.png", "boatccw.png", "boatcw.png"]
		epubToCbz.buildCbzFile(imgs, "", "From ePub.cbz")
		os.chdir("..")
		self.assertFalse(
			filecmp.cmp(os.path.join("img", "From ePub.cbz"), os.path.join("cbz", "Test.cbz")),
			"File generated by buildCbzFile should not be equal to the one in cbz directory")

	def tearDown(self):
		os.chdir(os.path.join(os.path.dirname(__file__), "test-resources"))
		if os.path.isfile(os.path.join("img", "From ePub.cbz")):
			os.remove(os.path.join("img", "From ePub.cbz"))


class TestFindHtmlAttributeValue(unittest.TestCase):
	# no negative tests, since I didn't put in any validation for this function
	
	# double quotes
	def test_getHtmlAttributeValue_doubleQuotes(self):
		tag = '<img src="images/cover.jpg" alt="image"/>'
		attr = 'src'
		self.assertEqual(epubToCbz.getHtmlAttributeValue(tag, attr), 'images/cover.jpg', 'Return value should be "images/cover.jpg".')
	
	# single quotes
	def test_getHtmlAttributeValue_singleQuotes(self):
		tag = "<img src='images/cover.jpg' alt='image'/>"
		attr = "src"
		self.assertEqual(epubToCbz.getHtmlAttributeValue(tag, attr), "images/cover.jpg", 'Return value should be "images/cover.jpg".')
	

class TestFindOpfEnterDoc(unittest.TestCase):
	# setup
	def setUp(self):
		self.bookDir = os.path.join(os.path.dirname(__file__), "test-resources")
		self.tempPath = "temp"
		os.chdir(self.bookDir)

	# no document directory
	def test_findOpfEnterDoc_noDocDir(self):
		if not os.path.exists(self.tempPath):
			os.mkdir(self.tempPath)
		os.chdir(os.path.join(self.bookDir, "cbz"))
		docDir, opfFile = epubToCbz.findOpfEnterDoc(self.bookDir, self.tempPath)
		self.assertEqual(docDir, "Provided ePub has no document directory.", "docDir should be \"Provided ePub has no document directory.\".")
		self.assertFalse(opfFile, "opfFile should be False.")
		self.assertFalse(self.tempPath in os.listdir(), "test-resources should no longer contain the temp directory.")
	
	# no OPF file
	def test_findOpfEnterDoc_noOpfFile(self):
		if not os.path.exists(self.tempPath):
			os.mkdir(self.tempPath)
		docDir, opfFile = epubToCbz.findOpfEnterDoc(self.bookDir, self.tempPath)
		self.assertEqual(docDir, "Provided ePub has no OPF file.", "docDir should be \"Provided ePub has no OPF file.\".")
		self.assertFalse(opfFile, "opfFile should be False.")
		self.assertFalse(self.tempPath in os.listdir(), "test-resources should no longer contain the temp directory.")
	
	# OPF file in top-level directory
	def test_findOpfEnterDoc_opfFileInTop(self):
		os.chdir(os.path.join(self.bookDir, "extracted-epub", "OEBPS"))
		docDir, opfFile = epubToCbz.findOpfEnterDoc(self.bookDir, self.tempPath)
		self.assertEqual(docDir, "", "docDir should be an empty string.")
		self.assertEqual(opfFile, "content.opf", "opfFile should be content.opf.")
	
	# OPF file one level down from top-level directory
	def test_findOpfEnterDoc_opfFileOneDown(self):
		os.chdir(os.path.join(self.bookDir, "extracted-epub"))
		docDir, opfFile = epubToCbz.findOpfEnterDoc(self.bookDir, self.tempPath)
		self.assertEqual(docDir, "OEBPS", "docDir should be OEBPS.")
		self.assertEqual(opfFile, "content.opf", "opfFile should be content.opf.")


class TestGetInnerTagContent(unittest.TestCase):
	# basic sanity to make sure it's working
	def test_getInnerTagContent_sanity1(self):
		expected = '<a href="#page199">Winter Vegetable Stew</a>'
		actual = epubToCbz.getInnerTagContent('<p class="center"><a href="#page199">Winter Vegetable Stew</a></p>')
		self.assertEqual(expected, actual, "Should return the <a> tag, its contents, and the closing tag")

	def test_getInnerTagContent_sanity2(self):
		expected = 'Winter Vegetable Stew'
		actual = epubToCbz.getInnerTagContent('<a href="#page199">Winter Vegetable Stew</a>')
		self.assertEqual(expected, actual, "Should return the inner contents of the <a> tag")

if __name__ == "__main__":
	unittest.main()
